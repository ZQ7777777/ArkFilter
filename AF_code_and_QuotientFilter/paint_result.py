# encoding=utf-8
import matplotlib

matplotlib.rcParams["backend"] = "SVG"
import numpy as np
import matplotlib.pyplot as plt
import math
import pandas as pd

# #绘制不同空间占用率下negative lookup结果
#
# # 输入因变量
# # negative_lookup_BF = [386528.84884766804, 388481.354693065, 371283.5387962292, 368006.12875601894, 342123.4277162769, 320558.05680618086, 351513.4323893613, 351262.2863099933, 348344.9775583553, 341326.37257508765, 346404.36096650554, 331457.60732786555, 331160.66416066064, 342108.36676494754, 327849.8841640231, 329177.7301146548, 327854.4073645254, 326687.9187951731, 319230.26541414304, 324728.93755209073]
# # negative_lookup_CF = [191819.11312746964, 193267.35690430138, 198217.92599493085, 200425.75454562335, 174855.0897031979, 175921.58757583302, 175757.1694177048, 175636.47765818032, 174855.26622970245, 173637.0443915785, 173206.1586285772, 169930.2360778657, 171651.6521235789, 168610.79784894903, 167169.75530914828, 170100.22493152213, 167091.89315312923, 166303.06721333464, 164482.37413884472, 163142.0532555294]
# # negative_lookup_ArkF = [477912.8912873056, 486646.2048737021, 466091.78031043865, 417247.44023811526, 386976.9318584419, 369871.8343389566, 370632.9604023174, 354437.36259576044, 348353.41874028265, 330025.60967933235, 322102.59383800376, 315838.6869664701, 310758.13205608405, 300066.0512622235, 291426.0851564626, 286295.48065571557, 281018.5046823694, 273212.0545099595, 265147.6196685532, 263637.793651203]
# # negative_lookup_QF = [782085.5614973261, 758171.7494253938, 739984.6438733571, 637507.782620297, 737618.8094047023, 601073.9419004102, 532701.39809419, 614246.4383904025, 557340.9641206252, 518972.35837417893, 430300.90797668777, 471284.9245854073, 372668.54699299426, 402357.60673809826, 316932.9286595738, 231020.09997680248, 163911.41562201572, 89647.76545002885, 37907.709547652594, 5958.1605595451]
#
# # negative_lookup_BF = [330450.3741770833, 343986.30890341324, 352425.301915423, 334224.4353022754, 329560.18501344667, 332184.4103493145, 328554.29531530576, 310129.04196119535, 325136.7388329145, 310562.1217407892, 316232.59134858195, 329442.85582066677, 316355.32352860505, 318525.0498681229, 327275.95896528446, 330034.20187826356, 323076.8113092243, 327344.70562717086, 315031.9378168541, 317225.8186132906]
# # negative_lookup_CF = [181711.98944099885, 172634.04118946224, 177177.53117463095, 160707.16942942396, 171108.9724073711, 170147.16267253217, 165719.52871047033, 168591.58689241981, 154148.6962347195, 164598.05760202682, 167624.1761773748, 172340.89120482226, 178339.43743202483, 170098.25872442639, 170438.31238373774, 169264.8237197092, 169804.55645262412, 164216.93600608013, 163497.18226623756, 172004.77877435708]
# # negative_lookup_ArkF = [476970.9569129134, 422167.93959757546, 425303.4961604651, 357257.27700289694, 396294.1165309111, 369428.5227188083, 360120.804157543, 340633.5243329523, 341382.41225050745, 318869.87760269543, 342637.0759610138, 325489.05466022645, 310201.7182043519, 304378.80733586935, 295457.78310485295, 294459.95205167745, 291095.9843357347, 283138.3141297147, 270195.85164909647, 268019.0130266776]
# # negative_lookup_QF = [674292.0984746797, 661591.2941884361, 652330.0717368792, 585251.9568248723, 625797.41368915, 530315.080878089, 566814.1183442805, 480213.96056382614, 443658.1734296011, 478836.66379609634, 450733.32397084864, 482659.8804810425, 456402.8514563211, 351263.61127460754, 316094.1159894871, 249002.8461765378, 157366.3875771898, 79404.91971647712, 32082.523819198297, 6797.300802263689]
#
# # negative_lookup_BF = [339732.7664383899, 350028.72629441094, 353292.81091937213, 351086.41670685104, 332239.2330362271, 341781.3331174563, 352570.58888348966, 334589.23894760746, 330613.4906783386, 331047.0791068874, 325809.3899270248, 318360.44707931735, 307524.24314562505, 306580.63948711194, 294179.9732566012, 312590.9822341493, 304890.39465371147, 310810.96060290444, 314494.3407168708, 306260.0619698866]
# # negative_lookup_CF = [177995.05997979082, 184102.2122231028, 186887.74752842283, 184182.92720665646, 174931.82612491422, 178838.84741219235, 180820.38962793304, 176715.61423458174, 174546.3415768401, 174281.6151454998, 167941.2264531807, 168564.42977637882, 162277.6775092285, 156300.02665672777, 154930.93869391878, 156754.46363269634, 167227.70386123078, 169483.3978153577, 164502.80617924698, 162713.23634248177]
# # negative_lookup_ArkF = [477152.94779992243, 443554.17559510417, 448968.4871730462, 424058.4191649984, 401983.89588373114, 360495.93432623305, 353658.3009591608, 363438.52788099233, 353402.06491440086, 350826.25225794263, 324838.34827426454, 320489.8164604331, 309084.62566981855, 288127.6748741351, 281993.0979844598, 281871.3766663055, 283298.9836145978, 281017.0107258812, 260259.13449602164, 266829.2188252254]
# # negative_lookup_QF = [770555.1959938951, 710262.0694795256, 727229.0987290932, 649563.0126957692, 624404.4326490969, 547605.8632626198, 564464.9573900522, 610224.6423138067, 513879.26239107974, 532022.4778124142, 519097.81501281174, 453978.2586478996, 412954.70430616004, 359370.2541550635, 288628.8567211526, 248755.24997898797, 148623.9706837708, 102094.35477485434, 37291.02381332407, 7624.7937733948565]
#
# #30次运行结果的数据
# negative_lookup_BF = [359031.01995688525, 352858.2374935627, 342419.2595957772, 340863.5610862182, 331972.6270999117, 334188.4909314062, 332882.0190136645, 324681.64276578836, 327768.3707740961, 324938.24973438744, 319629.1690691687, 317985.3066805922, 316127.24971147807, 310914.29813403706, 312075.1162867892, 307880.5916333046, 306612.9783049284, 306269.05298870266, 300087.36902635905, 298668.0595946636]
# negative_lookup_CF = [173007.2258391765, 169095.20398343992, 166173.1530271292, 167145.38299439382, 166111.04033310845, 165809.15833693786, 163912.78258834776, 162946.59721742917, 162336.4739077967, 161879.08615394396, 160366.0101373628, 159451.1161145217, 159364.5582874776, 159063.93512128486, 157853.7361957218, 157326.8504148787, 157531.70663268873, 156454.69866655086, 156148.7541386743, 155602.30867925694]
# negative_lookup_ArkF = [445448.887865663, 430408.5607920775, 414873.13241400674, 393039.0793976027, 381842.3196384417, 366170.97021111095, 358681.86923033907, 348277.9987002659, 334931.0725562394, 327149.1987112727, 317091.03516033, 307734.85109816975, 300248.8902429286, 293702.2957290992, 286448.1426206137, 280944.5120335309, 274302.8057608136, 269492.9230057787, 264901.42224602966, 257573.80863470148]
# negative_lookup_QF = [791991.2678390665, 686247.601599419, 672578.2502436257, 652900.0770898203, 688359.0885836036, 656128.9420665246, 618018.8526986575, 572379.4325996843, 538903.3309206908, 494960.0580191479, 461719.68651571224, 459309.14630473725, 418595.7155618762, 343627.3417269071, 298020.78434794734, 229531.39577122306, 149852.22843067627, 84425.29526233411, 33300.02951128036, 5465.1474843584465]
#
#
# # for i in range(len(negative_lookup_BF)):
# #     negative_lookup_BF[i] = math.log(negative_lookup_BF[i], 10)
# #     negative_lookup_CF[i] = math.log(negative_lookup_CF[i], 10)
# #     negative_lookup_ArkF[i] = math.log(negative_lookup_ArkF[i], 10)
# #     negative_lookup_QF[i] = math.log(negative_lookup_QF[i], 10)
#
# y1 = np.array(negative_lookup_BF)
# y2 = np.array(negative_lookup_CF)
# y3 = np.array(negative_lookup_ArkF)
# y4 = np.array(negative_lookup_QF)
#
# for i in range(len(y1)):
#     y1[i] = y1[i] / 10 ** 5
#     y2[i] = y2[i] / 10 ** 5
#     y3[i] = y3[i] / 10 ** 5
#     y4[i] = y4[i] / 10 ** 5
#
#
# # assert y1.shape[0]==y2.shape[0], '两个因变量个数不相等！'
#
# fig, ax = plt.subplots(figsize=(6.4, 4.2), dpi=100)
# # 设置自变量的范围和个数
# # x = np.arange(0.025, 1, 0.05)
# x = np.linspace(0.025, 0.975, y3.shape[0])
# # 画图
# ax.plot(x, y1, label='BF', linestyle='--', marker='*', color="steelblue", markersize='8')
# ax.plot(x, y2, label='CF', linestyle='--', marker='o', color="darkorange", markersize='8')
# ax.plot(x, y3, label='ArkF', linestyle='--', marker='v', color="crimson", markersize='8')
# ax.plot(x, y4, label='QF', linestyle='--', marker='d', color="mediumseagreen", markersize='8')
# # 设置坐标轴
# # ax.set_xlim(0, 9.5)
# # ax.set_ylim(0, 1.4)
# ax.set_xlabel('α: table occupancy', fontdict={"family":"Times New Roman","weight": "normal", "size": 18})
# ax.set_ylabel('negative lookup tput ($×$10$^5$)', fontdict={"family":"Times New Roman","weight": "normal", "size": 18})
# # plt.xlabel("f: fingerprint size in bits", fontdict=) log$_{10}$ξ$^‘$
# # 设置刻度
# # ax.tick_params(axis='both')
# ax.tick_params(labelsize=16)
# labels = ax.get_xticklabels() + ax.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels]
# # 显示网格
# # ax.grid(True, linestyle='-.')
# ax.yaxis.grid(True, linestyle='-.')
# # 添加图例
# legend = ax.legend(loc='best', prop={'family': 'Times New Roman', "size": 14})
#
# plt.show()
#
# fig.savefig('C:/Users/fptjy/Desktop/Quotient CF/实验结果/negative_look.svg', dpi=600, format='svg')
# # # fig.savefig('1.png')   #保存图片


# ##绘制不同空间占用率下positive lookup结果
#
# # 输入因变量
#
# # positive_lookup_BF = [113800.24397549826, 96394.53572676182, 108434.46255564556, 101314.15781157001, 98356.20664354322, 97470.10656007842, 96590.84789478905, 99350.75960317909, 97141.89927231421, 97142.02461896848, 97659.37668530556, 96830.25304014338, 95401.60646662647, 94801.29697016455, 97891.76853196406, 99155.97733573476, 99031.54402091364, 97867.04113757807, 96850.88730619228, 98927.03997631234]
# # positive_lookup_CF = [248003.78429517502, 241141.5149879802, 233854.60806266, 243689.6336953043, 216564.4560347415, 207562.598163912, 215802.70523569494, 204909.1781714945, 213343.9803298654, 206782.12385596288, 203245.34189581987, 197787.34934621013, 211516.91802912555, 204672.08535415985, 205573.67482714434, 204292.92529350676, 200820.4370588137, 191647.78569964925, 189913.58913289165, 189076.6699635518]
# # positive_lookup_ArkF = [547562.351171826, 547714.2299977713, 529857.8658861957, 496239.6661807935, 481743.3740352023, 457954.62666656077, 473568.50538134977, 447074.12578507664, 454966.2586395239, 441007.11971588427, 433707.58367059455, 440330.892126304, 431387.4950549339, 406991.77492363745, 413389.00166232826, 392785.83266994666, 389881.1844329658, 371657.42691849335, 360761.83363175765, 337589.3536423001]
# # positive_lookup_QF = [656960.6545542052, 615953.3805376276, 603964.9948023031, 573807.403256312, 491729.4737544187, 601053.8954108858, 532581.5163032607, 491756.04290059226, 557329.8115019811, 444941.5396929762, 382488.6329527642, 377150.5779912926, 315171.47451927885, 276621.9554138136, 226407.6318999695, 175211.64075921592, 102067.51516844811, 55701.74543921561, 23692.625894922305, 3676.3180780066173]
#
# #30次运行结果的数据
#
# positive_lookup_BF = [90133.92294238175, 91087.58534369197, 91586.16736764896, 90796.2397418323, 91435.97792021095, 90730.29544887997, 91565.87498378493, 90974.62108045827, 90501.01395281401, 90350.2950090734, 91043.30204392412, 90623.29979570018, 90375.34504266042, 90974.03678149196, 91384.6461300799, 91291.93708224264, 91557.53216164658, 91207.62600477219, 91430.78594377615, 91517.25761075121]
# positive_lookup_CF = [209390.90426673516, 199470.64961049243, 201188.77736072987, 202645.15895441908, 198908.82110777052, 198644.58742903793, 197045.6818828974, 196920.3422658147, 198196.2349593884, 196159.3289467226, 195150.97814104587, 193291.50680445723, 192543.43732491802, 193555.85634773024, 191154.74747630197, 189327.56857761779, 187611.63787509763, 184302.4005018117, 180133.5479092322, 176581.78814059353]
# positive_lookup_ArkF = [515827.5180747819, 488991.11557883513, 472542.49546883453, 469706.0143640576, 460056.1955859218, 454711.2184412989, 444535.3361446465, 442617.905280888, 437017.7545649516, 431000.9018080787, 421911.9495520975, 418458.63218568236, 412671.2969463436, 406639.4363844635, 394686.9167178566, 389209.56423368066, 377795.2570466196, 364346.33856362477, 348663.2260278917, 328436.1455841039]
# positive_lookup_QF = [650950.6628200284, 554109.235404416, 540976.8782097382, 532100.861532074, 565555.0104425482, 530871.7863972033, 469959.09869766113, 467949.48863106465, 416918.87248459394, 403564.3160601545, 392200.9816107314, 337066.55545481906, 303513.6519953718, 259418.07743053845, 207052.13947154777, 145733.23577261818, 96081.36401804279, 52215.9764092346, 20455.73195076557, 3406.810185232394]
#
#
# y1 = np.array(positive_lookup_BF)
# y2 = np.array(positive_lookup_CF)
# y3 = np.array(positive_lookup_ArkF)
# y4 = np.array(positive_lookup_QF)
#
# for i in range(len(y1)):
#     y1[i] = y1[i] / 10 ** 5
#     y2[i] = y2[i] / 10 ** 5
#     y3[i] = y3[i] / 10 ** 5
#     y4[i] = y4[i] / 10 ** 5
#
# # assert y1.shape[0]==y2.shape[0], '两个因变量个数不相等！'
#
# fig, ax = plt.subplots(figsize=(6.4, 4.2), dpi=100)
# # 设置自变量的范围和个数
# # x = np.arange(0.025, 1, 0.05)
# x = np.linspace(0.025, 0.975, y3.shape[0])
# # 画图
# ax.plot(x, y1, label='BF', linestyle='--', marker='*', color="steelblue", markersize='8')
# ax.plot(x, y2, label='CF', linestyle='--', marker='o', color="darkorange", markersize='8')
# ax.plot(x, y3, label='ArkF', linestyle='--', marker='v', color="crimson", markersize='8')
# ax.plot(x, y4, label='QF', linestyle='--', marker='d', color="mediumseagreen", markersize='8')
# # 设置坐标轴
# # ax.set_xlim(0, 9.5)
# # ax.set_ylim(0, 1.4)
# ax.set_xlabel('α: table occupancy', fontdict={"family":"Times New Roman","weight": "normal", "size": 18})
# ax.set_ylabel('positive lookup tput ($×$10$^5$)', fontdict={"family":"Times New Roman","weight": "normal", "size": 18})
# # plt.xlabel("f: fingerprint size in bits", fontdict=)
# # 设置刻度
# # ax.tick_params(axis='both')
# ax.tick_params(labelsize=16)
# labels = ax.get_xticklabels() + ax.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels]
# # 显示网格
# # ax.grid(True, linestyle='-.')
# ax.yaxis.grid(True, linestyle='-.')
# # 添加图例
# legend = ax.legend(loc='best', prop={'family': 'Times New Roman', "size": 14})
#
# plt.show()
#
# fig.savefig('C:/Users/fptjy/Desktop/Quotient CF/实验结果/positive_look.svg', dpi=600, format='svg')
# # # fig.savefig('1.png')   #保存图片


# ##绘制不同空间占用率下delete结果
#
# # 输入因变量
# # delete_CF = [210231.69274446432, 212560.71290532706, 200339.31983186855, 211731.42071206373, 185868.7765444947, 175925.1294159277, 182335.66558534495, 178829.48765526427, 183490.37861741133, 177344.7828574745, 184830.64638785826, 184480.9586519538, 173469.5092980197, 177485.00141052567, 175258.57092534087, 171897.14761228577, 173802.21977424546, 163634.98873554132, 167606.16218743793, 162366.144859186]
# # delete_ArkF = [515719.0635451505, 448031.67549706605, 423898.6306863386, 437170.1866609489, 414131.3963938662, 400709.82104394276, 405895.9589896045, 397399.4237336441, 391135.3742451903, 371894.70501050935, 379850.9306141488, 372377.5413970017, 360279.9294129288, 368836.1038198999, 355422.7879727469, 345991.1408120411, 332898.4863090531, 317641.8372808454, 301381.7301394159, 287333.0852611391]
# # delete_QF = [547459.8930481283, 545504.9944506105, 483132.8143430054, 572769.9530516432, 491795.0770462277, 360865.8216695701, 355475.07385216217, 351286.44939965697, 348472.3369116433, 346197.0483890699, 312952.51955612155, 314108.7623366231, 273205.0905792268, 245931.80668367885, 182816.84071198257, 153991.21955952267, 104036.8218806945, 61693.05167804369, 29300.169652912376, 5408.718552623292]
#
# #次数为30次的结果
# delete_CF = [180404.62553432665, 175783.96034299754, 175760.1350111815, 174723.49869640975, 174854.228150833, 173643.44807958748, 172476.44365914434, 169965.13732852667, 171374.7280725329, 170227.31665125035, 168813.15785947692, 168598.11462290454, 166426.792484934, 165164.03586376572, 162888.6055070249, 161808.73732459825, 159654.06382845758, 158984.76420854725, 156157.43759875314, 153240.18129501754]
# delete_ArkF = [455509.38519380667, 422348.844389227, 414625.1670288378, 400914.89369531977, 396615.21373592335, 394103.5432464218, 386831.7119022736, 385420.9173178943, 379128.9278908823, 371750.0575592584, 361949.228280005, 359125.7803680956, 354640.34980441903, 347525.1772002313, 341568.9940508527, 331485.23311292625, 321906.7283375206, 312923.9887183737, 296986.62391521386, 279549.91262909066]
# delete_QF = [467619.41350374796, 468036.9317486251, 487220.6828210224, 478058.7945437559, 430322.7893015564, 403749.45929294615, 374419.4473345112, 381574.0539446281, 352340.2443151734, 331528.5918074973, 302241.162019432, 276376.70518687216, 253282.4261543812, 217198.34323876444, 178008.92256272028, 137642.62627695085, 95475.53570381949, 58496.44588832062, 25422.84629518294, 5127.693083360251]
#
#
# y1 = np.array(delete_CF)
# y2 = np.array(delete_ArkF)
# y3 = np.array(delete_QF)
#
# for i in range(len(y1)):
#     y1[i] = y1[i] / 10 ** 5
#     y2[i] = y2[i] / 10 ** 5
#     y3[i] = y3[i] / 10 ** 5
#
#
# # assert y1.shape[0]==y2.shape[0], '两个因变量个数不相等！'
#
# fig, ax = plt.subplots(figsize=(6.4, 4.2), dpi=100)
# # 设置自变量的范围和个数
# # x = np.arange(0.025, 1, 0.05)
# x = np.linspace(0.025, 0.975, y3.shape[0])
# # 画图
# ax.plot(x, y1, label='CF', linestyle='--', marker='o', color="darkorange", markersize='8')
# ax.plot(x, y2, label='ArkF', linestyle='--', marker='v', color="crimson", markersize='8')
# ax.plot(x, y3, label='QF', linestyle='--', marker='d', color="mediumseagreen", markersize='8')
#
# # 设置坐标轴
# # ax.set_xlim(0, 9.5)
# # ax.set_ylim(0, 1.4)
# ax.set_xlabel('α: table occupancy', fontdict={"family":"Times New Roman","weight": "normal", "size": 18})
# ax.set_ylabel('delete tput ($×$10$^5$)', fontdict={"family":"Times New Roman","weight": "normal", "size": 18})
# # plt.xlabel("f: fingerprint size in bits", fontdict=)
# # 设置刻度
# # ax.tick_params(axis='both')
# ax.tick_params(labelsize=16)
# labels = ax.get_xticklabels() + ax.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels]
# # 显示网格
# # ax.grid(True, linestyle='-.')
# ax.yaxis.grid(True, linestyle='-.')
# # 添加图例
# legend = ax.legend(loc='best', prop={'family': 'Times New Roman', "size": 14})
#
# plt.show()
#
# fig.savefig('C:/Users/fptjy/Desktop/Quotient CF/实验结果/delete_thpt.svg', dpi=600, format='svg')
# # # fig.savefig('1.png')   #保存图片


# ##绘制不同空间占用率下插入的结果
#
# # 输入因变量
#
# # insert_thp_BF = [71465.32502429822, 71466.34649743435, 71435.71500007143, 83422.31713828084, 75038.08882024247, 75037.19385290628, 75044.35418940437, 60030.11306712466, 60032.404270951614, 75038.98380892746, 42880.25953933132, 75046.14448705486, 100054.1662359555, 75139.35782062689, 83555.7562436501, 81296.51500859295, 75202.22805266523, 75139.80652096024, 75139.35782062689, 83556.31109222269]
# # insert_thp_CF = [166583.37497917708, 166572.27571043075, 166750.0416875104, 166755.60298826042, 301127.4589575456, 150337.06898611676, 150080.6526639711, 300207.85417760175, 150087.81325667666, 150096.7649584884, 150075.28266781164, 150086.02304444285, 149810.83912753596, 143457.13243341845, 136723.2267037552, 120161.11997096938, 103607.40399183189, 71615.48312189458, 33067.241311346166, 1855.6562739553583]
# # insert_thp_ArkF = [501856.87042055605, 500150.04501350404, 250137.57566661664, 250125.06253126563, 149842.95138971586, 149830.46165204034, 300107.61305094446, 150028.75879337068, 300107.61305094446, 300243.67081056576, 300078.9850233712, 150297.56330625896, 150060.96455659973, 130593.15841912986, 158317.44234326048, 136938.97939860917, 103715.00634674667, 60163.29262811624, 33054.9930910562, 1697.5265288435828]
# # insert_thp_QF = [300180.1080648389, 300240.192153723, 300180.1080648389, 300180.1080648389, 300186.36829925806, 299914.4797997855, 150091.3938092682, 150130.79116604824, 99950.05242588886, 100163.28090173852, 75046.14448705486, 100061.32705642852, 60077.40456921865, 60201.287952003215, 49311.29860917887, 33797.04975450433, 25277.601554072106, 15118.113869041112, 6553.422511473647, 1467.3039526877167]
# #
# # insert_thp_BF = [80429.60186542837, 75955.25658042576, 78017.11296915112, 79442.23384257215, 75057.9432486802, 78409.63541022585, 70037.69769711047, 86733.1293007257, 83376.73154791849, 75046.14506546098, 75031.8455226535, 75037.19390805483, 70038.15822064296, 56705.936926696195, 66709.64497208816, 70305.82052207644, 83381.88679847184, 70019.54400481486, 70050.4333046285, 78373.21179370524]
# # insert_thp_CF = [170875.55600900957, 201013.58121014418, 177930.74676775464, 173030.0528380813, 250127.2645272327, 200117.9911472498, 133440.80185122017, 143451.76094479932, 150163.72997283784, 183429.00566812782, 150078.26675336165, 133368.53177408467, 200149.32969536376, 150075.87966140822, 133406.94837767442, 83344.1908527842, 91693.32421247415, 65033.070003830544, 33626.02583450905, 1786.6707383663904]
# # insert_thp_ArkF = [462157.99468768405, 294754.1726278298, 472705.3033006823, 361533.26217475935, 202659.74950078162, 300121.72959290526, 300083.76614547434, 249232.35942349673, 150067.5271594025, 200167.9452029809, 150006.1178677002, 250069.4009777382, 102007.8805309931, 199949.6541554695, 200050.8816333999, 116722.43608655084, 116689.3855003325, 65022.42253434295, 29730.840621153624, 1635.8632299489443]
# # insert_thp_QF = [266245.8036397291, 125817.81580271765, 244256.26617044213, 326008.1802314483, 200141.58929910723, 250039.28857746255, 299900.89199778717, 200062.81931066245, 150175.07982857563, 150043.08308803343, 133469.5153449409, 91764.86881250492, 83365.72342496911, 65034.717130477795, 53357.07057958186, 41099.36531012601, 28351.442897519155, 18026.390027468366, 8936.705579798856, 1831.2358165558423]
#
# # #30次实验结果
# # insert_thp_BF = [79098.92211228308, 82614.13596217534, 85164.96796473401, 85100.26471972333, 76274.6723187896, 77600.78669426787, 80001.70044505205, 78592.37666627957, 79173.49201553027, 77487.02637111647, 78333.76569744387, 80451.8559337336, 76067.88602592531, 76957.99634058085, 78848.05513153883, 78008.01531483301, 76232.92952642324, 74851.66656174388, 75392.17483010459, 78138.36495508713]
# # insert_thp_CF = [179470.89462406407, 181848.96176103034, 187081.68735909634, 187709.96917467346, 164278.88971599683, 164124.05044325397, 165722.16155548298, 168493.60569450812, 165362.40174380722, 159890.66597327119, 159456.2563253798, 157361.6263037604, 148638.97371937317, 143443.2453237492, 136724.0584639484, 121899.2266911576, 105089.93563642056, 76557.93904187514, 37825.048501937745, 1988.3790482167644]
# # insert_thp_ArkF = [416175.75576194155, 383400.8023060061, 374098.0278387441, 356233.8189279858, 232741.80169984227, 238161.9115951325, 234719.30500270711, 224152.3636815293, 213357.0713086664, 203575.09111255323, 195815.75617018942, 180625.47679664654, 165303.2241666252, 162159.61461526356, 150576.2729610935, 125714.40561911142, 105541.52510961475, 72935.72129164558, 33453.97441448718, 1746.7340593188737]
# # insert_thp_QF = [448076.0290817268, 442724.7940819031, 390647.24689602066, 357593.86303023406, 251353.8941577966, 229537.69941433254, 220682.5140043462, 197398.90188602588, 168213.4947637425, 149555.16936315477, 127700.93184761029, 110901.43565227455, 89637.54003828314, 74145.78916681693, 59649.933504935456, 43717.872706702285, 30804.89333390703, 18757.620339530975, 9328.275346643466, 2090.3262712348596]
#
# # # 50次实验结果
# # insert_thp_BF = [78409.2328327148, 77682.08776373003, 77293.80253235674, 77107.8345335799, 72703.29517398923,
# #                  71950.56759367113, 73003.20464482703, 73461.58586679636, 71903.4779974488, 74592.86904842581,
# #                  70514.7769043946, 73795.03818526614, 70699.36267490152, 71460.03272339677, 69796.27015415777,
# #                  73396.82230402161, 71605.18590630486, 73003.94316675076, 71599.60525468065, 72092.15009509736]
# # insert_thp_CF = [175838.16434494444, 172008.7075268484, 164177.92979962585, 172495.61560625068, 163007.92046255936,
# #                  166989.31391482337, 173032.06541215084, 159000.10507997614, 160494.22740216422, 151028.84741002644,
# #                  154006.38628918174, 149486.9654339072, 155478.67616654493, 140987.01466093917, 132015.9905807065,
# #                  109491.54588012205, 95894.90103845303, 68098.41709882705, 33690.92012822793, 1756.761663045128]
# # insert_thp_ArkF = [423245.86953334144, 414991.0477900632, 404985.78447526204, 338311.12377915886, 233379.45116092626,
# #                    249396.7534431443, 211941.95728865016, 237035.98797874828, 211965.6016015647, 200957.5948149633,
# #                    208965.38774566245, 200244.75143309016, 174328.23841999535, 168985.8335294897, 143972.11576985207,
# #                    119599.47863585994, 96324.79822339411, 68858.42941278008, 30681.119890158752, 1584.0484772761129]
# # insert_thp_QF = [300002.15201601246, 291883.07420926, 296440.15934527677, 292727.6307096468, 264034.10923006816,
# #                  237054.12639012054, 248022.88323996126, 199997.7517637564, 169017.88251144622, 145495.6137632122,
# #                  113513.38946254372, 96016.22522664335, 82015.02380438181, 67462.1861606558, 51504.056711871985,
# #                  36969.60663651843, 25973.410508418252, 16135.15548661422, 8169.127904598123, 1846.3442216677195]
#
# # # 60次实验结果，除了QF的delta一直是3000以外，其余的delta都是5000
# # insert_thp_BF = [75896.87462782043, 74241.67537994153, 78856.04784578721, 76792.33571993565, 71601.29382281235,
# #                  74067.81282425705, 73225.16736324363, 72044.46714952501, 71600.55015662841, 72020.71522445367,
# #                  72377.87068752137, 73712.74134521885, 71385.37954402831, 71511.00164265645, 70626.21368754345,
# #                  67824.88758782906, 71501.71766628718, 69983.77253001303, 72520.99899827341, 71356.53917966793]
# # insert_thp_CF = [170404.18669763597, 173608.3203709649, 181040.06142057476, 166563.87919324747, 152048.3240916274,
# #                  151713.04076177755, 151866.47305904105, 157168.06052088892, 151986.29254672493, 147479.7750360281,
# #                  146328.43906878206, 145594.66692627678, 145134.02325884468, 130975.12101745605, 124391.13920402387,
# #                  115114.86346810145, 97496.9554265539, 67439.6484758696, 34661.170334548704, 1763.272660767973]
# # insert_thp_ArkF = [377855.97832516406, 385125.1430666716, 361169.0790183592, 314744.50692040264, 237726.3407128672,
# #                    258934.1122532539, 245514.23016389747, 241636.00401058875, 233042.19653845645, 213678.62468054745,
# #                    212456.9910607507, 194262.79041491498, 181936.28759840052, 164326.5969807125, 131195.9589046395,
# #                    130399.25836114012, 100901.14668141502, 69378.73902831566, 31543.203347997805, 1555.1460578429442]
# # insert_thp_QF = [317602.97979340545, 316576.093589816, 309721.11513080087, 298294.5322047929, 248904.97912254444,
# #                  240546.12883777748, 211799.45916891744, 190535.09906031933, 168821.62008693573, 132661.02734857032,
# #                  116936.87470392999, 96320.91550565859, 82489.64175578483, 62043.4615845295, 51846.25307484389,
# #                  38109.42749590641, 26222.145795510507, 16063.536097145523, 8324.275936607233, 1840.5514578757045]
#
# # 80次实验结果，delta全都是5000
# insert_thp_BF = [67760.89719472012, 68196.10171130215, 65099.08043345179, 67261.2012988262, 66688.72643314388,
#                  68597.42429875676, 67464.62584376699, 65755.1801872117, 65363.79534357749, 68022.71123600323,
#                  68089.80415113569, 67424.2677364069, 67854.91638881314, 67659.34117325321, 67559.15192246031,
#                  66660.73429954631, 67664.16735280932, 66322.06937915672, 65921.71188649753, 66122.06937915672]
# insert_thp_CF = [138582.12759890416, 142702.04355604193, 152378.0048493616, 142365.58192827128, 148704.83959979968,
#                  154318.69143944833, 145702.41971256115, 148707.69474161335, 146841.04355809995, 146707.36915167695,
#                  141836.963516185, 138360.71013800084, 138702.7001921263, 125836.06802169021, 114028.15803111528,
#                  105155.30933136455, 89285.92965200295, 65185.45527780078, 31218.72564110629, 1763.272660767973]
# insert_thp_ArkF = [289380.374655977, 291549.57401739154, 275219.53114412446, 267916.61160219595, 234689.5096455683,
#                    245513.4444170142, 244401.19317189028, 240710.3266819489, 225909.49012542274, 217731.9645402743,
#                    236311.75941812992, 224887.07651804504, 181139.25770469947, 170444.52037820924, 162395.16245254458,
#                    133597.78066760433, 88827.13835996251, 71205.71088118, 26210.637395511083, 1584.0484772761129]
# insert_thp_QF = [302541.3274609331, 311424.61350268696, 282075.8894076316, 282121.7010769837, 274093.42838110996,
#                  228084.9074557239, 219416.915400895, 165716.57501763562, 152711.72026514084, 135384.30801788892,
#                  110700.30810317825, 92896.8439122118, 77328.25909946128, 61530.28868187122, 48136.547632233414,
#                  35010.40555342651, 23883.236235734956, 14624.167861729971, 6933.684007991955, 1840.5514578757045]
#
# y1 = np.array(insert_thp_BF)
# y2 = np.array(insert_thp_CF)
# y3 = np.array(insert_thp_ArkF)
# y4 = np.array(insert_thp_QF)
#
# for i in range(len(y1)):
#     y1[i] = y1[i] / 10 ** 5
#     y2[i] = y2[i] / 10 ** 5
#     y3[i] = y3[i] / 10 ** 5
#     y4[i] = y4[i] / 10 ** 5
#
# # assert y1.shape[0]==y2.shape[0], '两个因变量个数不相等！'
#
# fig, ax = plt.subplots(figsize=(6.4, 4.2), dpi=100)
# # 设置自变量的范围和个数
# # x = np.arange(0.025, 1, 0.05)
# x = np.linspace(0.025, 0.975, y3.shape[0])
# # 画图
# ax.plot(x, y1, label='BF', linestyle='--', marker='*', color="steelblue", markersize='8')
# ax.plot(x, y2, label='CF', linestyle='--', marker='o', color="darkorange", markersize='8')
# ax.plot(x, y3, label='ArkF', linestyle='--', marker='v', color="crimson", markersize='8')
# ax.plot(x, y4, label='QF', linestyle='--', marker='d', color="mediumseagreen", markersize='8')
#
# # 设置坐标轴
# # ax.set_xlim(0, 9.5)
# # ax.set_ylim(0, 1.4)
# ax.set_xlabel('α: table occupancy', fontdict={"family": "Times New Roman", "weight": "normal", "size": 18})
# ax.set_ylabel('insert tput ($×$10$^5$)', fontdict={"family": "Times New Roman", "weight": "normal", "size": 18})
# # plt.xlabel("f: fingerprint size in bits", fontdict=)
# # 设置刻度
# # ax.tick_params(axis='both')
# ax.tick_params(labelsize=16)
# labels = ax.get_xticklabels() + ax.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels]
# # 显示网格
# # ax.grid(True, linestyle='-.')
# ax.yaxis.grid(True, linestyle='-.')
# # 添加图例
# legend = ax.legend(loc='best', prop={'family': 'Times New Roman', "size": 14})
#
# plt.show()
#
# # fig.savefig('C:/Users/fptjy/Desktop/Quotient CF/实验结果/insert.svg', dpi=600, format='svg')
# # # fig.savefig('1.png')   #保存图片


##绘制不同m下fp和bit的结果

# 输入因变量
# bit_result = [5.2139917695473255, 5.738303341902313, 6.263428424569519, 6.789771267026471, 7.316114109483424, 7.842237142214655, 8.368444722851315, 8.89476220305498, 9.421079683258645, 9.947379199434621, 10.473686112591816, 11.000002007735807, 11.526317902879796, 12.05263241110092]
# fp_fact = [0.02263374485596708, 0.008226221079691516, 0.003341043433564636, 0.001799023387304035, 0.0010922641994345927, 0.00057823894118025, 0.00022486708748935898, 0.00012849547856534798, 8.030967410334249e-05, 1.806964039407878e-05, 9.034811127273384e-06, 9.536745078788573e-06, 4.266438587879098e-06, 2.7606363869192513e-06]

fp_fact = [0.015123456790123457, 0.007352185089974294, 0.004034952454381907, 0.0017861732202518635,
           0.0009701876124389618, 0.0004111921359504, 0.00020880515266869046, 0.00012849547856534798,
           5.5815223501823026e-05, 3.0718388669933924e-05, 1.4355311013334379e-05, 8.482683780606676e-06,
           3.5386343581820755e-06, 1.769316957070975e-06]

bit_result = [0 for i in range(14)]
AF_occupancy = [0.94921875, 0.94970703125, 0.949951171875, 0.949951171875, 0.949951171875, 0.949981689453125,
                0.9499969482421875, 0.9499969482421875, 0.9499969482421875, 0.9499988555908203, 0.9499998092651367,
                0.9499998092651367, 0.9499998092651367, 0.9499999284744263]
for i in range(len(bit_result)):
    xx = (2*AF_occupancy[i]*4+2*fp_fact[i]) / fp_fact[i]
    bit_result[i] = math.log(xx, 2) / AF_occupancy[i]

print("不同m下的bpe为：", bit_result)

m = [2 ** 8, 2 ** 9, 2 ** 10, 2 ** 11, 2 ** 12, 2 ** 13, 2 ** 14, 2 ** 15, 2 ** 16, 2 ** 17, 2 ** 18, 2 ** 19, 2 ** 20,
     2 ** 21]
fp_theory = [0 for i in range(14)]
for i in range(len(m)):
    fp_theory[i] = 0.95 * 4 / (m[i] - 1)


for i in range(len(fp_theory)):
    fp_fact[i] = math.log(fp_fact[i], 10)
    fp_theory[i] = math.log(fp_theory[i], 10)

# 这是10次实验结果的
# vcf = [1.78527663230896e-05, 1.8886557579040527e-05, 1.900194778442383e-05, 1.895163841247559e-05,
#        1.9071562004089358e-05, 1.9151665401458742e-05, 1.8990506458282474e-05, 1.9040092372894287e-05]
# Dvcf = [1.78527663230896e-05, 1.805875768661499e-05, 1.8306723690032956e-05, 1.8473614215850833e-05,
#         1.8602356910705565e-05, 1.8833145618438722e-05, 1.8955214214324953e-05, 1.914689702987671e-05,
#         1.9298541164398193e-05]
#
# dcf = [5.3721364116668704e-05, 5.3721364116668704e-05, 5.3721364116668704e-05, 5.3721364116668704e-05,
#        5.3721364116668704e-05, 5.3721364116668704e-05, 5.3721364116668704e-05, 5.3721364116668704e-05]

# y1 = pd.read_csv('11.csv')
y1 = np.array(bit_result)
# y2 = pd.read_csv('12.csv')
# y2 = np.array(Dvcf)
# assert y1.shape[0]==y2.shape[0], '两个因变量个数不相等！'
y3 = np.array(fp_fact)
y2 = np.array(fp_theory)

fig, ax = plt.subplots(figsize=(6.4, 4.2), dpi=100)
# 设置自变量的范围和个数
x1 = range(8, 22)

from matplotlib.pyplot import MultipleLocator

# 从pyplot导入MultipleLocator类，这个类用于设置刻度间隔
x_major_locator = MultipleLocator(2)
# 把x轴的刻度间隔设置为1，并存在变量里

ax.xaxis.set_major_locator(x_major_locator)
# 把x轴的主刻度设置为1的倍数
plt.xlim(7.5, 21.5)
# 把x轴的刻度范围设置为-0.5到11，因为0.5不满一个刻度间隔，所以数字不会显示出来，但是能看到一点空白

# 画图
s1 = ax.plot(x1, y1, label='bpe', linestyle='-', color="steelblue", marker='o', markersize='8')

ax2 = ax.twinx()
s3 = ax2.plot(x1, y3, label='fp in fact', linestyle='-', color="purple", marker='*', markersize='8')
s2 = ax2.plot(x1, y2, label='fp in theory', linestyle='-', color="crimson", marker='v', markersize='8')

# plt.axhline(y=np.mean(dcf)*10 ** 6, label='DCF', color="r", linestyle='-.')
# 设置坐标轴
# ax.set_xlim(0, 9.5)
# ax.set_ylim(0, 1.4)
# ax.set_xlabel('time(s)')
# ax.set_ylabel('distance(m)')
ax.set_xlabel('The value of log$_2$$m$', fontdict={"family": "Times New Roman", "weight": "normal", "size": 18})
ax.set_ylabel('average bits per element', fontdict={"family": "Times New Roman", "weight": "normal", "size": 18})
ax2.set_ylabel('false positive rate (log$_1$$_0$fp)', color="r",
               fontdict={"family": "Times New Roman", "weight": "normal", "size": 18})

ax.set_ylim(8, 24)
# ax2.set_ylim(0, 0.025)

# 设置刻度
ax.tick_params(labelsize=16)
labels = ax.get_xticklabels() + ax.get_yticklabels()
[label.set_fontname('Times New Roman') for label in labels]

ax2.tick_params(labelsize=16)
labels2 = ax2.get_yticklabels()
[label.set_fontname('Times New Roman') for label in labels2]

# 刻度线
for line in ax2.yaxis.get_ticklines():
    # line is a Line2D instance
    line.set_color('r')
    # line.set_markersize(25)
    # line.set_markeredgewidth(3)

# 刻度 文字
for label in ax2.yaxis.get_ticklabels():
    # label is a Text instance
    label.set_color('r')
    # label.set_rotation(45)
    # label.set_fontsize(16)

# 显示网格
# ax.grid(True, linestyle='-.')
ax.yaxis.grid(True, linestyle='-.')
# 添加图例
ss = s1 + s2 + s3
labs = [l.get_label() for l in ss]
ax.legend(ss, labs, loc="upper center", prop={'family': 'Times New Roman', "size": 14})
# legend = ax.legend(loc='best')

plt.show()
fig.savefig('C:/Users/fptjy/Desktop/Quotient CF/实验结果/m_bpe_fp.svg', dpi=600, format='svg')
# fig.savefig('1.png')


##不同比例混合查询实验结果

# 输入因变量

# mixlookup_thp_BF = [293143.50802636996, 267205.8616666819, 229651.00273125814, 219532.4962462177, 205500.4325388786, 186643.82524912164, 180556.4936478533, 166391.203228691, 158203.6791766724, 150102.091308374, 139200.2022261007, 134504.398290623, 130285.23775734974, 122141.93788076508, 116980.97051699112, 113001.61636228903, 108099.7336327664, 103356.17621113859, 98486.26167764672, 99073.67035835031]
# mixlookup_thp_CF = [162589.31634503196, 165286.57690338983, 168073.84515097042, 168073.84515097042, 171250.64823147145, 170372.2659895288, 171841.03820868323, 172434.6732806453, 175779.87639741364, 174855.78645191196, 177029.78560335384, 176092.56447421946, 182207.007912432, 180885.29476334256, 181215.23270776754, 185600.9828024689, 183889.020168254, 187345.52412632073, 183550.3475953533, 190933.33340742523]
# mixlookup_thp_ArkF = [270102.6326790346, 269372.2550221728, 277623.5302048091, 279968.3580062675, 277626.33419947384, 287227.08582838695, 294008.19104106573, 295750.14590132533, 297515.93729137484, 304794.53859374026, 310491.6528831334, 315404.36628227105, 312437.94989468856, 316403.9558897431, 320472.0416289485, 333337.48302358796, 333336.6320152069, 336715.17224453256, 341324.33601402893, 347274.51197162457]
# mixlookup_thp_QF = [17797.74830419774, 18055.880569472774, 17303.54573168267, 16745.05830150242, 15730.344505960958, 15770.305583537096, 15230.240951114163, 15093.173783476248, 14622.58137115959, 14029.717018571191, 14093.257922807577, 13630.679965304904, 13281.917297787008, 13169.733308500117, 12533.632652920172, 12335.073489985085, 12072.138332181748, 11887.828875614796, 11600.103269827394, 11223.807021806535]

# 30次实验的结果
# mixlookup_thp_BF = [292853.47290750744, 263139.508193388, 241564.0793673588, 221085.03879847532, 206094.61862639667, 193387.50399510525, 180264.72971246566, 169381.13569909442, 160273.35336930773, 151444.9861600992, 144904.46540906242, 137377.3599803103, 131680.771904032, 125592.46231158903, 120795.26122232903, 115425.38546243304, 111473.4483531445, 107533.23595957742, 103822.386391871, 99760.2637810374]
# mixlookup_thp_CF = [167734.75717501485, 170330.54444633704, 171618.51959160823, 172854.7687854483, 173865.66851869228, 174452.07511492036, 176586.89067313445, 178300.92580064136, 179422.09293445208, 181007.23211811433, 181854.54520909817, 183494.60012375252, 184821.97120014855, 185885.09973605536, 188806.46635643495, 188774.1558263535, 190742.47639274117, 193066.75638903736, 194138.82543334868, 193950.4122136321]
# mixlookup_thp_ArkF = [264845.90718728775, 269889.4089653594, 273747.3322070972, 277049.56384822476, 281844.58320141456, 286662.6964718932, 289237.61749086156, 294802.2896004734, 298442.00797021826, 304095.2670932328, 306428.6105787778, 312153.9007452464, 316160.68773136544, 319333.41054009675, 324938.1873188719, 329149.7090224059, 335530.67897191463, 339019.6917243507, 343985.92374365614, 350108.51622445614]
# mixlookup_thp_QF = [18128.32750888912, 17458.336825047914, 17148.752866936502, 16521.15808113329, 16179.865107746946, 15750.030431452671, 15216.468089945916, 14853.643520794632, 14537.715552464528, 14189.237254822701, 13817.747846038148, 13496.630219420675, 13162.21001077954, 12895.316646990244, 12596.943696107623, 12322.704763014732, 12174.26028277939, 11752.577370486306, 11620.329462263097, 11309.551318159773]
#
# y1 = np.array(mixlookup_thp_BF)
# y2 = np.array(mixlookup_thp_CF)
# y3 = np.array(mixlookup_thp_ArkF)
# y4 = np.array(mixlookup_thp_QF)
#
# for i in range(len(y1)):
#     y1[i] = y1[i] / 10 ** 5
#     y2[i] = y2[i] / 10 ** 5
#     y3[i] = y3[i] / 10 ** 5
#     y4[i] = y4[i] / 10 ** 5
#
# # assert y1.shape[0]==y2.shape[0], '两个因变量个数不相等！'
#
# fig, ax = plt.subplots(figsize=(6.4, 4.2), dpi=100)
# # 设置自变量的范围和个数
# # x = np.arange(0.025, 1, 0.05)
# x = np.linspace(0.025, 0.975, y3.shape[0])
# # 画图
# # ax.plot(x, y1, label='BF', linestyle='--', marker='*', markersize='8')
# # ax.plot(x, y2, label='CF', linestyle='--', marker='o', markersize='8')
# # ax.plot(x, y3, label='ArkF', linestyle='--', marker='v', markersize='8')
# # ax.plot(x, y4, label='QF', linestyle='--', marker='d', markersize='8')
#
# ax.plot(x, y1, label='BF', linestyle='--', marker='*', color="steelblue", markersize='8')
# ax.plot(x, y2, label='CF', linestyle='--', marker='o', color="darkorange", markersize='8')
# ax.plot(x, y3, label='ArkF', linestyle='--', marker='v', color="crimson", markersize='8')
# ax.plot(x, y4, label='QF', linestyle='--', marker='d', color="mediumseagreen", markersize='8')
#
# # 设置坐标轴
# # ax.set_xlim(0, 9.5)
# # ax.set_ylim(0, 1.4)
# ax.set_xlabel('p: fraction of queries on existing elements', fontdict={"family":"Times New Roman","weight": "normal", "size": 18})
# ax.set_ylabel('mix lookup tput ($×$10$^5$)', fontdict={"family":"Times New Roman","weight": "normal", "size": 18})
# # plt.xlabel("f: fingerprint size in bits", fontdict=)
# # 设置刻度
# # ax.tick_params(axis='both')
# ax.tick_params(labelsize=16)
# labels = ax.get_xticklabels() + ax.get_yticklabels()
# [label.set_fontname('Times New Roman') for label in labels]
# # 显示网格
# # ax.grid(True, linestyle='-.')
# ax.yaxis.grid(True, linestyle='-.')
# # 添加图例
# legend = ax.legend(loc='best', prop={'family': 'Times New Roman', "size": 14})
#
# plt.show()
#
# fig.savefig('C:/Users/fptjy/Desktop/Quotient CF/实验结果/mix_look.svg', dpi=600, format='svg')
# # # fig.savefig('1.png')   #保存图片
